#!/usr/bin/env zsh
#
# **** DO NOT EDIT THIS FILE ****
# This file is managed by Ansible
# {{ ansible_managed }}
#
# BSD 3-Clause License
#
# Copyright (c) 2024, © Badassops LLC / Luc Suryo
# All rights reserved.
#
#* File			:	ansible.sh
#*
#* Description	:	script to deploy the given role to the given host
#*
#* Author	:	Luc Suryo <luc@badassops.com>
#*
#* Version	:	0.2
#*
#* Date		:	Oct 9, 2024
#*
#* History	:
#* 		Date:			Author:		Info:
#*		Jan 16, 2017	LIS			First Release
#*		Oct 9, 2024		LIS			remove hardcoded stuff and replaced by variables
#*									see ; ansible used variables

_program="${0##*/}"
_author='Luc Suryo'
_copyright="Copyright 2017 - $(date "+%Y") © Badassops LLC"
_license='License 3-Clause BSD, https://opensource.org/licenses/BSD-3-Clause ♥'
_version='0.2'
_email='luc@badassops.com'
_summary='Script to deploy the given role to the given host'
_cancelled="OK : Process has been cancelled on your request."
_info="$_program $_version\n$_copyright\n$_license\n\nWritten by $_author <$_email>\n$_summary\n"

# we need lock
_need_lock=1

# working variables
_opid=$$
_hostname="${HOSTNAME%%.*}"
_work_dir=/var/tmp/"$_program"
_lockfile="$_work_dir/$_program".LOCK
_logFile=/tmp/"$_program".log
_echo_flag='-e'

# ansible used variables
ansibleHome="/etc/ansible"
inventoriesFile=inventories/deployer.yml
ansiblePlaybookDir="playbooks"
ansiblePlaybook="/usr/local/bin/ansible-playbook"

# Set interrupt handler
trap inthandler 1 2 3 4 5 9 10 12 15 23 24 25

function inthandler() {
	kill -TERM $_spid
	clean_up
	_print_it warning "$_cancelled"
	exit 0
}

function clean_up() {
	rm -f "$_lockfile" > /dev/null 2>&1
	return 0
}

function check_running() {
	if [[ -f "$_lockfile" ]]; then
		/bin/ps -p $(cat "$_lockfile") > /dev/null 2>&1
		if (( $? == 0 )) ; then
			_print_it warning "There is already a $_program running, execution has been terminated"
			_print_it warning "If this is an error please remove the lock file: $_lockfile"
			exit 0
		else
			_print_it warning "Lock file found and deleted since there is no process with that pid"
			rm -rf "$_lockfile" > /dev/null 2>&1
		fi
	fi
	if ! mkdir -p "$_work_dir" > /dev/null 2>&1;then
		_print_it error "Unable to create file working directory $_work_dir"
		exit 3
	fi
	echo "$_opid" > "$_lockfile"
	return 0
}

function runPlaybook() {
	local _result=0
	ipAddress=$(echo $@ | cut -d: -f1)
	playHost=$(echo $@ | cut -d: -f2)
	playBook=$(echo $@ | cut -d: -f3)
	if ! echo $playBook | grep '.yml' ; then
		playBook="$playBook".yml
	fi

	# create the inventory file for the given host
cat << _EOF_ > "$ansibleHome"/"$inventoriesFile"
---
local:
  hosts:
   localhost:
     ansible_host: 127.0.0.1

new_installs:
  hosts:
    $playHost:
      ansible_host: $ipAddress
  vars:
    cntry_code: us
_EOF_

	chmod 0644 "$ansibleHome"/"$inventoriesFile"
	echo "Running: $ansiblePlaybook -i $inventoriesFile $ansiblePlaybookDir/$playBook --limit $playHost" >> $_logFile 2>&1
	# run ansible-playbook
	(
		cd $ansibleHome;
	 	$ansiblePlaybook -i $inventoriesFile $ansiblePlaybookDir/$playBook --limit $playHost >> $_logFile 2>&1
	)
	rm -f "$inventoriesFile"
	clean_up
	exit 0
}

function main() {
	(( $_need_lock == 1 )) && check_running
	runPlaybook $@ &
	disown $
	trap 1 2 3 4 5 9 10 12 15 23 24 25
	exit 0
}
main $@
